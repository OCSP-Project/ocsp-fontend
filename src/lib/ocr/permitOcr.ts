import { createWorker } from 'tesseract.js';

export interface PermitScanResult {
  permitNumber: string;
  floorArea: number;
  numberOfFloors: number;
  buildingType: string;
  address: string;
  owner: string;
  issueDate?: string;
  expiryDate?: string;
  confidence: number;
  warnings: string[];
  rawText: string;
}

export async function scanPermitImage(
  file: File,
  onProgress?: (progress: number) => void
): Promise<PermitScanResult> {
  // Create Tesseract worker
  const worker = await createWorker('vie+eng', 1, {
    logger: (m) => {
      if (m.status === 'recognizing text' && onProgress) {
        onProgress(Math.round(m.progress * 100));
      }
    },
  });

  try {
    // Perform OCR
    const { data } = await worker.recognize(file);
    const rawText = data.text;
    const confidence = data.confidence / 100;

    // Parse the text
    const result = parsePermitText(rawText, confidence);

    return result;
  } finally {
    await worker.terminate();
  }
}

function parsePermitText(text: string, confidence: number): PermitScanResult {
  const warnings: string[] = [];

  // Debug: Log raw text ƒë·ªÉ ki·ªÉm tra
  console.log('üîç Raw OCR text:', text);

  // Extract permit number
  const permitNumber = extractPermitNumber(text);
  if (!permitNumber) warnings.push('Kh√¥ng t√¨m th·∫•y s·ªë gi·∫•y ph√©p');

  // Extract floor area
  const floorArea = extractFloorArea(text);
  if (!floorArea || floorArea <= 0) warnings.push('Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c di·ªán t√≠ch');

  // Extract number of floors
  const numberOfFloors = extractNumberOfFloors(text);
  if (!numberOfFloors || numberOfFloors <= 0) warnings.push('Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c s·ªë t·∫ßng');

  // Extract building type
  const buildingType = extractBuildingType(text, numberOfFloors || 0);

  // Extract address
  const address = extractAddress(text);

  // Extract owner
  const owner = extractOwner(text);

  // Low confidence warning
  if (confidence < 0.7) {
    warnings.push('ƒê·ªô ch√≠nh x√°c OCR th·∫•p. Vui l√≤ng ki·ªÉm tra l·∫°i');
  }

  // Debug: Log extracted values
  console.log('üìä Extracted values:', {
    permitNumber,
    floorArea,
    numberOfFloors,
    buildingType,
    address,
    owner
  });

  return {
    permitNumber: permitNumber || '',
    floorArea: floorArea || 0,
    numberOfFloors: numberOfFloors || 0,
    buildingType,
    address: address || '',
    owner: owner || '',
    confidence,
    warnings,
    rawText: text,
  };
}

// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê PARSING FUNCTIONS ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

function extractPermitNumber(text: string): string | null {
  const patterns = [
    // Ch√≠nh x√°c: "S·ªë: CCS2075" ho·∫∑c "S·ªë: CCS2075/GPXD-UBND"
    /(?:S·ªë|s·ªë)[\s:]*([A-Z]{2,}\d{4}(?:\/[A-Z\-]+)?)/i,
    // "CCS2075/GPXD-UBND"
    /([A-Z]{2,}\d{4}\/[A-Z\-]+)/i,
    // "CCS2075"
    /([A-Z]{2,}\d{4})/i,
    // Ch√≠nh x√°c: "S·ªë: 6015/GPXD-UBND"
    /(?:S·ªë|s·ªë)[\s:]*(\d+\/[A-Z\-]+)/i,
    // OCR l·ªói: "S·ªë: gOA5‚Ñ¢ /GPXD-UBND"
    /(?:S·ªë|s·ªë)[\s:]*([a-zA-Z0-9‚Ñ¢]+\s*\/[A-Z\-]+)/i,
    // "GP-6015-2024"
    /(GP[\-\s]*\d{4}[\-\s]*\d+)/i,
    // "6015/GPXD-UBND"
    /(\d+\/GP[\-\s]*[A-Z]+)/i,
    // T√¨m pattern GPXD-UBND
    /([a-zA-Z0-9‚Ñ¢\s]+\/GPXD-UBND)/i,
    // T√¨m s·ªë c√≥ GPXD
    /([a-zA-Z0-9‚Ñ¢\s]+\/GPXD)/i,
  ];

  console.log('üîç Testing permit number patterns...');
  
  for (let i = 0; i < patterns.length; i++) {
    const pattern = patterns[i];
    const match = text.match(pattern);
    console.log(`Pattern ${i + 1}:`, pattern, 'Match:', match);
    
    if (match) {
      const result = match[1].trim();
      console.log(`‚úÖ Found permit number: ${result} from "${match[0]}"`);
      return result;
    }
  }
  
  // Fallback: T√¨m pattern CCS + s·ªë trong to√†n b·ªô text
  console.log('üîç Fallback: Finding CCS patterns...');
  const ccsMatches = text.match(/(CCS\d{4})/gi);
  if (ccsMatches) {
    console.log('All CCS matches:', ccsMatches);
    const result = ccsMatches[0];
    console.log(`‚úÖ Fallback found permit number: ${result}`);
    return result;
  }
  
  console.log('‚ùå No permit number found');
  return null;
}

function extractFloorArea(text: string): number | null {
  const patterns = [
    // Ch√≠nh x√°c theo gi·∫•y ph√©p: "T·ªïng di·ªán t√≠ch s√†n x√¢y d·ª±ng: 196,53 m¬≤"
    /T·ªïng\s+di·ªán\s+t√≠ch\s+s√†n\s+x√¢y\s+d·ª±ng[:\s]*(\d+[,\.]?\d*)\s*m[¬≤2]?/i,
    // OCR l·ªói: "T√¥ng di·ªán t√≠ch s·∫£n x√¢y d·ª±ng: 196,53 m·ªÇ"
    /T√¥ng\s+di·ªán\s+t√≠ch\s+s·∫£n\s+x√¢y\s+d·ª±ng[:\s]*(\d+[,\.]?\d*)\s*m[·ªÇ2¬≤]?/i,
    // Tr∆∞·ªùng h·ª£p kh√°c: "T·ªïng di·ªán t√≠ch x√¢y d·ª±ng"
    /T·ªïng\s+di·ªán\s+t√≠ch\s+x√¢y\s+d·ª±ng[:\s]*(\d+[,\.]?\d*)\s*m[¬≤2]?/i,
    // "Di·ªán t√≠ch s√†n"
    /di·ªán\s*t√≠ch\s+s√†n[:\s]*(\d+[,\.]?\d*)\s*m[¬≤2]?/i,
    // "Di·ªán t√≠ch x√¢y d·ª±ng t·∫ßng tr·ªát"
    /di·ªán\s*t√≠ch\s+x√¢y\s+d·ª±ng\s+t·∫ßng\s+tr·ªát[:\s]*(\d+[,\.]?\d*)\s*m[¬≤2]?/i,
    // T·ªïng qu√°t
    /di·ªán\s*t√≠ch[:\s]*(\d+[,\.]?\d*)\s*m[¬≤2]/i,
    // Fallback: t√¨m s·ªë c√≥ m¬≤ ho·∫∑c m·ªÇ
    /(\d+[,\.]?\d*)\s*m[¬≤2·ªÇ]/i,
    // Th√™m patterns linh ho·∫°t h∆°n
    /t·ªïng.*?(\d+[,\.]?\d*)\s*m[¬≤2·ªÇ]/i,
    /t√¥ng.*?(\d+[,\.]?\d*)\s*m[¬≤2·ªÇ]/i,
    /(\d+[,\.]?\d*)\s*m[¬≤2·ªÇ].*?t·ªïng/i,
    /(\d+[,\.]?\d*)\s*m[¬≤2·ªÇ].*?t√¥ng/i,
    // T√¨m s·ªë l·ªõn nh·∫•t c√≥ m¬≤ (c√≥ th·ªÉ l√† di·ªán t√≠ch)
    /(\d{2,}[,\.]?\d*)\s*m[¬≤2·ªÇ]/i,
  ];

  console.log('üîç Testing floor area patterns...');
  console.log('Raw text sample:', text.substring(0, 500));
  
  for (let i = 0; i < patterns.length; i++) {
    const pattern = patterns[i];
    const match = text.match(pattern);
    console.log(`Pattern ${i + 1}:`, pattern, 'Match:', match);
    
    if (match) {
      const value = match[1].replace(',', '.');
      const num = parseFloat(value);
      console.log(`‚úÖ Found floor area: ${num} from "${match[0]}"`);
      if (!isNaN(num) && num > 0) return num;
    }
  }
  
  // Fallback: T√¨m t·∫•t c·∫£ s·ªë c√≥ m¬≤, m·ªÇ v√† ch·ªçn s·ªë l·ªõn nh·∫•t
  console.log('üîç Fallback: Finding all numbers with m¬≤/m·ªÇ...');
  const allMatches = text.match(/(\d+[,\.]?\d*)\s*m[¬≤2·ªÇ]/gi);
  if (allMatches) {
    console.log('All m¬≤/m·ªÇ matches:', allMatches);
    const numbers = allMatches.map(match => {
      const value = match.replace(/[^\d,\.]/g, '').replace(',', '.');
      return parseFloat(value);
    }).filter(num => !isNaN(num) && num > 0);
    
    if (numbers.length > 0) {
      const maxNumber = Math.max(...numbers);
      console.log(`‚úÖ Fallback found floor area: ${maxNumber} (largest m¬≤/m·ªÇ value)`);
      return maxNumber;
    }
  }
  
  console.log('‚ùå No floor area found');
  return null;
}

function extractNumberOfFloors(text: string): number | null {
  const patterns = [
    // Ch√≠nh x√°c: "S·ªë t·∫ßng: 02 t·∫ßng + l·ª≠ng"
    /S·ªë\s+t·∫ßng[:\s]*(\d+)\s+t·∫ßng/i,
    // OCR l·ªói: "S·ªë t·∫Øng: 02 ting + l·ª´ng"
    /S·ªë\s+t·∫Øng[:\s]*(\d+)\s*ting/i,
    /S·ªë\s+t·∫Øng[:\s]*(\d+)/i,
    // "S·ªë t·∫ßng: 02"
    /S·ªë\s+t·∫ßng[:\s]*(\d+)/i,
    // "02 t·∫ßng + l·ª≠ng"
    /(\d+)\s+t·∫ßng(?:\s*\+\s*(?:l·ª≠ng|l·ªØng))?/i,
    // OCR l·ªói: "02 ting + l·ª´ng"
    /(\d+)\s*ting(?:\s*\+\s*(?:l·ª≠ng|l·ª´ng))?/i,
    // T√¨m s·ªë c√≥ "t·∫ßng" ·ªü sau
    /(\d+)\s+t·∫ßng/i,
    // T√¨m s·ªë c√≥ "ting" ·ªü sau
    /(\d+)\s*ting/i,
    // Th√™m patterns linh ho·∫°t h∆°n
    /t·∫ßng[:\s]*(\d+)/i,
    /t·∫Øng[:\s]*(\d+)/i,
    /(\d+)\s*t·∫ßng/i,
    /(\d+)\s*ting/i,
    // T√¨m s·ªë c√≥ "l·ª≠ng" ho·∫∑c "l·ªØng" ho·∫∑c "l·ª´ng"
    /(\d+).*?(?:l·ª≠ng|l·ªØng|l·ª´ng)/i,
  ];

  console.log('üîç Testing number of floors patterns...');
  
  for (let i = 0; i < patterns.length; i++) {
    const pattern = patterns[i];
    const match = text.match(pattern);
    console.log(`Pattern ${i + 1}:`, pattern, 'Match:', match);
    
    if (match) {
      const num = parseInt(match[1]);
      console.log(`‚úÖ Found number of floors: ${num} from "${match[0]}"`);
      if (!isNaN(num)) return num;
    }
  }
  
  // Fallback: T√¨m t·∫•t c·∫£ s·ªë c√≥ "t·∫ßng", "ting" v√† ch·ªçn s·ªë h·ª£p l√Ω nh·∫•t
  console.log('üîç Fallback: Finding all numbers with "t·∫ßng"/"ting"...');
  const allMatches = text.match(/(\d+).*?(?:t·∫ßng|ting)/gi);
  if (allMatches) {
    console.log('All "t·∫ßng"/"ting" matches:', allMatches);
    const numbers = allMatches.map(match => {
      const num = parseInt(match.replace(/[^\d]/g, ''));
      return num;
    }).filter(num => !isNaN(num) && num > 0 && num <= 10); // S·ªë t·∫ßng h·ª£p l√Ω t·ª´ 1-10
    
    if (numbers.length > 0) {
      const maxNumber = Math.max(...numbers);
      console.log(`‚úÖ Fallback found number of floors: ${maxNumber} (largest reasonable value)`);
      return maxNumber;
    }
  }
  
  console.log('‚ùå No number of floors found');
  return null;
}

function extractBuildingType(text: string, floors: number): string {
  const hasLung = /l·ª≠ng|l·ªØng/i.test(text);
  const extra = hasLung ? ' + l·ª≠ng' : '';
  
  if (floors > 0) {
    return `Nh√† ${floors} t·∫ßng${extra}`;
  }
  
  return 'Nh√† ·ªü ri√™ng l·∫ª';
}

function extractAddress(text: string): string | null {
  const patterns = [
    // "Tr√™n l√¥ ƒë·∫•t s·ªë 428"
    /Tr√™n\s+l√¥\s+ƒë·∫•t\s+s·ªë[:\s]*(\d+[^,\n]*)/i,
    // "ƒê·ªãa ch·ªâ:"
    /ƒë·ªãa\s*ch·ªâ[:\s]*(.*?)(?:\n|$)/i,
    // "Dia ch·ªâ:" (OCR l·ªói)
    /Dia\s*ch·ªâ[:\s]*(.*?)(?:\n|$)/i,
    // "t·∫°i"
    /t·∫°i[:\s]*(.*?)(?:\n|$)/i,
    // T√¨m ƒë·ªãa ch·ªâ c√≥ "H∆∞ng Hoa"
    /(.*?H∆∞ng\s+Hoa.*?)(?:\n|$)/i,
    // T√¨m ƒë·ªãa ch·ªâ c√≥ "CCS2075" - ƒë√¢y c√≥ th·ªÉ l√† s·ªë gi·∫•y ph√©p, kh√¥ng ph·∫£i ƒë·ªãa ch·ªâ
    /(.*?CCS\d+.*?)(?:\n|$)/i,
  ];

  console.log('üîç Testing address patterns...');
  
  for (let i = 0; i < patterns.length; i++) {
    const pattern = patterns[i];
    const match = text.match(pattern);
    console.log(`Pattern ${i + 1}:`, pattern, 'Match:', match);
    
    if (match) {
      let address = match[1].trim().replace(/\s+/g, ' ');
      
      // Clean up OCR errors
      address = address.replace(/\\n/g, ' ');
      address = address.replace(/[‚Ñ¢]/g, '');
      
      // Stop at next field
      const stopWords = ['ch·ªß ƒë·∫ßu t∆∞', 'gi·∫•y ph√©p', 'c·∫•p ng√†y', 'di·ªán t√≠ch', 'c·∫•p cho', 'ƒë∆∞·ª£c ph√©p'];
      for (const word of stopWords) {
        const idx = address.toLowerCase().indexOf(word);
        if (idx > 0) address = address.substring(0, idx).trim();
      }
      
      if (address.length > 10) {
        console.log(`‚úÖ Found address: ${address} from "${match[0]}"`);
        return address;
      }
    }
  }
  
  console.log('‚ùå No address found');
  return null;
}

function extractOwner(text: string): string | null {
  const patterns = [
    // Ch√≠nh x√°c: "C·∫•p cho: B√† NGUY·ªÑN TH·ªä V√ÇN ANH"
    /C·∫•p\s+cho[:\s]*(.*?)(?:\n|$)/i,
    // OCR l·ªói: "C·∫•p cho: B√† NGUY√äN TH·ªä V√ÇN ANH"
    /C·∫•p\s+cho[:\s]*B√†\s+(.*?)(?:\n|$)/i,
    // "Ch·ªß ƒë·∫ßu t∆∞:"
    /ch·ªß\s*ƒë·∫ßu\s*t∆∞[:\s]*(.*?)(?:\n|$)/i,
    // "Ch·ªß s·ªü h·ªØu:"
    /ch·ªß\s*s·ªü\s*h·ªØu[:\s]*(.*?)(?:\n|$)/i,
    // T√¨m "B√†" + t√™n
    /B√†\s+([A-Z√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê\s]+)/i,
    // T√¨m "√îng" + t√™n
    /√îng\s+([A-Z√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê\s]+)/i,
  ];

  console.log('üîç Testing owner patterns...');
  
  for (let i = 0; i < patterns.length; i++) {
    const pattern = patterns[i];
    const match = text.match(pattern);
    console.log(`Pattern ${i + 1}:`, pattern, 'Match:', match);
    
    if (match) {
      let owner = match[1].trim().replace(/\s+/g, ' ');
      
      // Clean up OCR errors
      owner = owner.replace(/NGUY√äN/g, 'NGUY·ªÑN');
      owner = owner.replace(/[‚Ñ¢]/g, '');
      
      const stopWords = ['ƒë·ªãa ch·ªâ', 'gi·∫•y ph√©p', 'di·ªán t√≠ch', 'c·∫•p cho', 'ƒë∆∞·ª£c ph√©p'];
      for (const word of stopWords) {
        const idx = owner.toLowerCase().indexOf(word);
        if (idx > 0) owner = owner.substring(0, idx).trim();
      }
      
      if (owner.length > 3) {
        console.log(`‚úÖ Found owner: ${owner} from "${match[0]}"`);
        return owner;
      }
    }
  }
  
  console.log('‚ùå No owner found');
  return null;
}